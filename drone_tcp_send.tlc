%% File : drone_tcp_send.tlc
%% Created : Tue Jun 01 22:33:58 2021
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "drone_tcp_send.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  drone_tcp_send "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output

  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    %assign hFileName = "drone_tcp_send_accel_wrapper"
    %assign hFileNameMacro = FEVAL("upper", hFileName)
    %openfile hFile = "%<hFileName>.h"
    %selectfile hFile
    #ifndef _%<hFileNameMacro>_H_
    #define _%<hFileNameMacro>_H_

    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #ifdef __cplusplus
    #define SFB_EXTERN_C extern "C"
    #else
    #define SFB_EXTERN_C extern
    #endif
    SFB_EXTERN_C void drone_tcp_send_Start_wrapper_accel(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);
    SFB_EXTERN_C void drone_tcp_send_Outputs_wrapper_accel(const int32_T *u0,
			const int8_T *received,
			int32_T *y0,
			void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);
    SFB_EXTERN_C void drone_tcp_send_Terminate_wrapper_accel(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);
    #undef SFB_EXTERN_C
    #endif
    %closefile hFile

    %assign cFileName = "drone_tcp_send_accel_wrapper"
    %openfile cFile = "%<cFileName>.c"
    %selectfile cFile
    #include <string.h>
    #ifdef MATLAB_MEX_FILE
    #include "tmwtypes.h"
    #else
    #include "rtwtypes.h"
    #endif
    #include "%<hFileName>.h"
    

    extern void drone_tcp_send_Start_wrapper(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);
    extern void drone_tcp_send_Outputs_wrapper(const int32_T *u0,
			const int8_T *received,
			int32_T *y0,
			void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);
    extern void drone_tcp_send_Terminate_wrapper(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);
    void drone_tcp_send_Start_wrapper_accel(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4){
    drone_tcp_send_Start_wrapper(pW,
			para_addr, p_width0,
			para_port, p_width1,
			para_role_type, p_width2,
			para_role_tag, p_width3,
			para_role_id, p_width4);
    }
    void drone_tcp_send_Outputs_wrapper_accel(const int32_T *u0,
			const int8_T *received,
			int32_T *y0,
			void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4){
    drone_tcp_send_Outputs_wrapper(u0,
			received,
			y0,
			pW,
			para_addr, p_width0,
			para_port, p_width1,
			para_role_type, p_width2,
			para_role_tag, p_width3,
			para_role_id, p_width4);
    }
    void drone_tcp_send_Terminate_wrapper_accel(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4){
    drone_tcp_send_Terminate_wrapper(pW,
			para_addr, p_width0,
			para_port, p_width1,
			para_role_type, p_width2,
			para_role_tag, p_width3,
			para_role_id, p_width4);
    }

    %closefile cFile

    %<LibAddToCommonIncludes("%<hFileName>.h")>
    %<LibAddToModelSources("%<cFileName>")>

  %else
  %openfile externs

    #ifdef __cplusplus
    extern "C" {
    #endif

    extern void drone_tcp_send_Start_wrapper(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);

    extern void drone_tcp_send_Outputs_wrapper(const int32_T *u0,
			const int8_T *received,
			int32_T *y0,
			void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);

    extern void drone_tcp_send_Terminate_wrapper(void **pW,
			const uint8_T *para_addr, const int_T p_width0,
			const int32_T *para_port, const int_T p_width1,
			const int32_T *para_role_type, const int_T p_width2,
			const int32_T *para_role_tag, const int_T p_width3,
			const int32_T *para_role_id, const int_T p_width4);

    #ifdef __cplusplus
    }
    #endif
  %closefile externs
  %<LibCacheExtern(externs)>

  %endif
  %%
%endfunction


%% Function: Start ============================================================
%%
%function Start(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    drone_tcp_send_Start_wrapper_accel(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  %else
    drone_tcp_send_Start_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  %endif

%endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign pu0 = LibBlockInputSignalAddr(0, "", "", 0)
  %assign pu1 = LibBlockInputSignalAddr(1, "", "", 0)
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    drone_tcp_send_Outputs_wrapper_accel(%<pu0>, %<pu1>, %<py0>, %<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  %else
    drone_tcp_send_Outputs_wrapper(%<pu0>, %<pu1>, %<py0>, %<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  %endif

  %%
%endfunction

%% Function: Terminate ========================================================
%%
%function Terminate(block, system) Output
   /* %<Type> Block: %<Name> */
  %assign ppw = LibBlockDWorkAddr(PWORK, "", "", 0)
  %assign nelements1 = LibBlockParameterSize(P1)
  %assign param_width1 = nelements1[0] * nelements1[1]
  %if (param_width1) > 1
    %assign pp1 = LibBlockMatrixParameterBaseAddr(P1)
  %else
    %assign pp1 = LibBlockParameterAddr(P1, "", "", 0)
  %endif
  %assign nelements2 = LibBlockParameterSize(P2)
  %assign param_width2 = nelements2[0] * nelements2[1]
  %if (param_width2) > 1
    %assign pp2 = LibBlockMatrixParameterBaseAddr(P2)
  %else
    %assign pp2 = LibBlockParameterAddr(P2, "", "", 0)
  %endif
  %assign nelements3 = LibBlockParameterSize(P3)
  %assign param_width3 = nelements3[0] * nelements3[1]
  %if (param_width3) > 1
    %assign pp3 = LibBlockMatrixParameterBaseAddr(P3)
  %else
    %assign pp3 = LibBlockParameterAddr(P3, "", "", 0)
  %endif
  %assign nelements4 = LibBlockParameterSize(P4)
  %assign param_width4 = nelements4[0] * nelements4[1]
  %if (param_width4) > 1
    %assign pp4 = LibBlockMatrixParameterBaseAddr(P4)
  %else
    %assign pp4 = LibBlockParameterAddr(P4, "", "", 0)
  %endif
  %assign nelements5 = LibBlockParameterSize(P5)
  %assign param_width5 = nelements5[0] * nelements5[1]
  %if (param_width5) > 1
    %assign pp5 = LibBlockMatrixParameterBaseAddr(P5)
  %else
    %assign pp5 = LibBlockParameterAddr(P5, "", "", 0)
  %endif
  
  %if IsModelReferenceSimTarget() || CodeFormat == "S-Function" || ::isRAccel
    drone_tcp_send_Terminate_wrapper_accel(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  %else
    drone_tcp_send_Terminate_wrapper(%<ppw>, %<pp1>, %<param_width1>, %<pp2>, %<param_width2>, %<pp3>, %<param_width3>, %<pp4>, %<param_width4>, %<pp5>, %<param_width5>);
  %endif

%endfunction

%% [EOF] drone_tcp_send.tlc

